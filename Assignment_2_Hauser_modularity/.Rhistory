PopSizeEffect
pop <- c(10, 20, 100, 1000, 1e4, 5e4);
for(j in seq_along(pop)){
Nsims <- 10;
Ngens <- 1000;
driftMat <- matrix(nrow = 30, ncol = 10);
pop <- pop[j];
for(i in 1:Nsims){
x <- simDrift(Ngens = 1000, popsize = pop)
driftMat[,i] <- x
}
PopSizeEffect[[i]]<-driftMat
}
PopSizeEffect
set.seed(1)
help(matplot)
simDrift()
par(mfrow = c(1,1))
Nsims<-9
driftMat <- matrix(nrow = 30, ncol = 9);
for(i in 1:Nsims){
x <- c(simDrift())
driftMat[,i] <- x
matplot(driftMat, type = "l",
main = "9 Simulations of Genetic Drift Overlayed",
xlab = "Generations",
ylab = "Frequency of Allele A");
}
PopSizeEffect <- list();
PopSizeEffect
pop <- c(10, 20, 100, 1000, 1e4, 5e4);
for(j in seq_along(pop)){
Nsims <- 10;
Ngens <- 1000;
driftMat <- matrix(nrow = 30, ncol = 10);
popsize <- pop[j];
for(i in 1:Nsims){
x <- c(simDrift());
driftMat[,i] <- x;
}
PopSizeEffect[[i]]<-driftMat
}
PopSizeEffect
PopSizeEffect <- list();
PopSizeEffect
pop <- c(10, 20, 100, 1000, 1e4, 5e4);
for(j in seq_along(pop)){
Nsims <- 10;
Ngens <- 1000;
driftMat <- matrix(nrow = 30, ncol = 10);
popsize <- pop[j];
for(i in 1:Nsims){
x <- c(simDrift(Ngens = 1000, popsize = pop[j]));
driftMat[,i] <- x;
}
PopSizeEffect[[i]]<-driftMat
}
PopSizeEffect
Nsims <- 10;
driftMat <- matrix(nrow = 30, ncol = 10);
for(i in 1:Nsims){
Ngens <- 1000;
freqA <- 0.5;
popsize <- 50;
initA <- floor(freqA * popsize);
initB <- ceiling( (1 - freqA) * popsize);
popnow <- c(rep("A", initA), rep("B", initB));
alleleFreq <- numeric(length=Ngens);
alleleFreq[1] <- freqA;
simDrift <- function( Ngens = 1000, freqA = 0.5, popsize = 50 ) {
initA <- floor(freqA * popsize);
initB <- ceiling( (1 - freqA) * popsize);
popnow <- c(rep("A", initA), rep("B", initB));
alleleFreq <- numeric(length=Ngens);
alleleFreq[1] <- freqA;
for (i in 2:(Ngens)) {
popnow <- sample(popnow, replace = T);  #
alleleFreq[i] <- sum(popnow == "A")/popsize;
}
return(alleleFreq);
}
x <- c(simDrift());
driftMat[,i] <- x;
}
Nsims <- 10;
driftMat <- matrix(nrow = 1000, ncol = 10);
for(i in 1:Nsims){
freqA <- 0.5;
popsize <- 50;
initA <- floor(freqA * popsize);
initB <- ceiling( (1 - freqA) * popsize);
popnow <- c(rep("A", initA), rep("B", initB));
alleleFreq <- numeric(length=Ngens);
alleleFreq[1] <- freqA;
simDrift <- function( Ngens = 1000, freqA = 0.5, popsize = 50 ) {
initA <- floor(freqA * popsize);
initB <- ceiling( (1 - freqA) * popsize);
popnow <- c(rep("A", initA), rep("B", initB));
alleleFreq <- numeric(length=Ngens);
alleleFreq[1] <- freqA;
for (i in 2:(Ngens)) {
popnow <- sample(popnow, replace = T);  #
alleleFreq[i] <- sum(popnow == "A")/popsize;
}
return(alleleFreq);
}
x <- c(simDrift());
driftMat[,i] <- x;
}
driftMat
popNew <- c(10, 20, 100, 1000, 1e4, 5e4);
popNew
popNew <- c(10, 20, 100, 1000, 1e4, 5e4);
popNew
for(j in seq_along(popNew)){
Nsims <- 10;
driftMat <- matrix(nrow = 1000, ncol = 10);
popsize <- popNew[j];
for(i in 1:Nsims){
freqA <- 0.5;
initA <- floor(freqA * popsize);
initB <- ceiling( (1 - freqA) * popsize);
popnow <- c(rep("A", initA), rep("B", initB));
alleleFreq <- numeric(length=Ngens);
alleleFreq[1] <- freqA;
simDrift <- function( Ngens = 1000, freqA = 0.5, popsize = popsize ) {
initA <- floor(freqA * popsize);
initB <- ceiling( (1 - freqA) * popsize);
popnow <- c(rep("A", initA), rep("B", initB));
alleleFreq <- numeric(length=Ngens);
alleleFreq[1] <- freqA;
for (i in 2:(Ngens)) {
popnow <- sample(popnow, replace = T);  #
alleleFreq[i] <- sum(popnow == "A")/popsize;
}
return(alleleFreq);
}
x <- c(simDrift());
driftMat[,i] <- x;
}
}
popNew <- c(10, 20, 100, 1000, 1e4, 5e4);
popNew
for(j in seq_along(popNew)){
Nsims <- 10;
driftMat <- matrix(nrow = 1000, ncol = 10);
popsize <- popNew[j];
for(i in 1:Nsims){
freqA <- 0.5;
initA <- floor(freqA * popsize);
initB <- ceiling( (1 - freqA) * popsize);
popnow <- c(rep("A", initA), rep("B", initB));
alleleFreq <- numeric(length=Ngens);
alleleFreq[1] <- freqA;
simDrift <- function( Ngens = 1000, freqA = 0.5, popsize = popsize ) {
initA <- floor(freqA * popsize);
initB <- ceiling( (1 - freqA) * popsize);
popnow <- c(rep("A", initA), rep("B", initB));
alleleFreq <- numeric(length=Ngens);
alleleFreq[1] <- freqA;
for (i in 2:(Ngens)) {
popnow <- sample(popnow, replace = T);  #
alleleFreq[i] <- sum(popnow == "A")/popsize;
}
return(alleleFreq);
}
x <- c(simDrift());
driftMat[,i] <- x;
}
}
VariedPops;
VariedPops <- vector(mode = "list", length = length(popNew));
popNew <- c(10, 20, 100, 1000, 1e4, 5e4);
popNew
for(j in seq_along(popNew)){
Nsims <- 10;
driftMat <- matrix(nrow = 1000, ncol = 10);
popsize <- popNew[j];
for(i in 1:Nsims){
freqA <- 0.5;
initA <- floor(freqA * popsize);
initB <- ceiling( (1 - freqA) * popsize);
popnow <- c(rep("A", initA), rep("B", initB));
alleleFreq <- numeric(length=Ngens);
alleleFreq[1] <- freqA;
simDrift <- function( Ngens = 1000, freqA = 0.5, popsize = popsize ) {
initA <- floor(freqA * popsize);
initB <- ceiling( (1 - freqA) * popsize);
popnow <- c(rep("A", initA), rep("B", initB));
alleleFreq <- numeric(length=Ngens);
alleleFreq[1] <- freqA;
for (i in 2:(Ngens)) {
popnow <- sample(popnow, replace = T);  #
alleleFreq[i] <- sum(popnow == "A")/popsize;
}
return(alleleFreq);
}
x <- c(simDrift());
driftMat[,i] <- x;
}
VariedPops[[j]]<-driftMat;
}
VariedPops;
VariedPops <- vector(mode = "list", length = length(popNew));
popNew <- c(10, 20, 100, 1000, 1e4, 5e4);
popNew
for(j in seq_along(popNew)){
Nsims <- 10;
driftMat <- matrix(nrow = 1000, ncol = 10);
popsize <- popNew[j];
for(i in 1:Nsims){
freqA <- 0.5;
initA <- floor(freqA * popsize);
initB <- ceiling( (1 - freqA) * popsize);
popnow <- c(rep("A", initA), rep("B", initB));
alleleFreq <- numeric(length=Ngens);
alleleFreq[1] <- freqA;
simDrift <- function( Ngens = 1000, freqA = 0.5, popsize = popsize ) {
initA <- floor(freqA * popsize);
initB <- ceiling( (1 - freqA) * popsize);
popnow <- c(rep("A", initA), rep("B", initB));
alleleFreq <- numeric(length=Ngens);
alleleFreq[1] <- freqA;
for (i in 2:(Ngens)) {
popnow <- sample(popnow, replace = T);  #
alleleFreq[i] <- sum(popnow == "A")/popsize;
}
return(alleleFreq);
}
x <- c(simDrift());
driftMat[,i] <- x;
}
VariedPops[j]<-driftMat;
}
VariedPops;
rm(list = ls())
VariedPops <- vector(mode = "list", length = length(popNew));
popNew <- c(10, 20, 100, 1000, 1e4, 5e4);
popNew
for(j in seq_along(popNew)){
Nsims <- 10;
driftMat <- matrix(nrow = 1000, ncol = 10);
popsize <- popNew[j];
for(i in 1:Nsims){
freqA <- 0.5;
initA <- floor(freqA * popsize);
initB <- ceiling( (1 - freqA) * popsize);
popnow <- c(rep("A", initA), rep("B", initB));
alleleFreq <- numeric(length=Ngens);
alleleFreq[1] <- freqA;
simDrift <- function( Ngens = 1000, freqA = 0.5, popsize = popsize ) {
initA <- floor(freqA * popsize);
initB <- ceiling( (1 - freqA) * popsize);
popnow <- c(rep("A", initA), rep("B", initB));
alleleFreq <- numeric(length=Ngens);
alleleFreq[1] <- freqA;
for (i in 2:(Ngens)) {
popnow <- sample(popnow, replace = T);  #
alleleFreq[i] <- sum(popnow == "A")/popsize;
}
return(alleleFreq);
}
x <- c(simDrift());
driftMat[,i] <- x;
}
VariedPops[j]<-driftMat;
}
VariedPops;
popNew <- c(10, 20, 100, 1000, 1e4, 5e4);
VariedPops <- vector(mode = "list", length = length(popNew));
for(j in seq_along(popNew)){
Nsims <- 10;
driftMat <- matrix(nrow = 1000, ncol = 10);
popsize <- popNew[j];
for(i in 1:Nsims){
freqA <- 0.5;
initA <- floor(freqA * popsize);
initB <- ceiling( (1 - freqA) * popsize);
popnow <- c(rep("A", initA), rep("B", initB));
alleleFreq <- numeric(length=Ngens);
alleleFreq[1] <- freqA;
simDrift <- function( Ngens = 1000, freqA = 0.5, popsize = popsize ) {
initA <- floor(freqA * popsize);
initB <- ceiling( (1 - freqA) * popsize);
popnow <- c(rep("A", initA), rep("B", initB));
alleleFreq <- numeric(length=Ngens);
alleleFreq[1] <- freqA;
for (i in 2:(Ngens)) {
popnow <- sample(popnow, replace = T);  #
alleleFreq[i] <- sum(popnow == "A")/popsize;
}
return(alleleFreq);
}
x <- c(simDrift());
driftMat[,i] <- x;
}
VariedPops[j]<-driftMat;
}
VariedPops;
popNew <- c(10, 20, 100, 1000, 1e4, 5e4);
VariedPops <- vector(mode = "list", length = length(popNew));
for(j in seq_along(popNew)){
Nsims <- 10;
driftMat <- matrix(nrow = 1000, ncol = 10);
popsize <- popNew[j];
for(i in 1:Nsims){
Ngens <- 1000;
freqA <- 0.5;
initA <- floor(freqA * popsize);
initB <- ceiling( (1 - freqA) * popsize);
popnow <- c(rep("A", initA), rep("B", initB));
alleleFreq <- numeric(length=Ngens);
alleleFreq[1] <- freqA;
simDrift <- function( Ngens = 1000, freqA = 0.5, popsize = popsize ) {
initA <- floor(freqA * popsize);
initB <- ceiling( (1 - freqA) * popsize);
popnow <- c(rep("A", initA), rep("B", initB));
alleleFreq <- numeric(length=Ngens);
alleleFreq[1] <- freqA;
for (i in 2:(Ngens)) {
popnow <- sample(popnow, replace = T);  #
alleleFreq[i] <- sum(popnow == "A")/popsize;
}
return(alleleFreq);
}
x <- c(simDrift());
driftMat[,i] <- x;
}
VariedPops[[j]]<-driftMat;
}
VariedPops;
popNew <- c(10, 20, 100, 1000, 1e4, 5e4);
VariedPops <- vector(mode = "list", length = length(popNew));
for(j in seq_along(popNew)){
Nsims <- 10;
driftMat <- matrix(nrow = 1000, ncol = 10);
popsize <- popNew[j];
for(i in 1:Nsims){
Ngens <- 1000;
freqA <- 0.5;
initA <- floor(freqA * popsize);
initB <- ceiling( (1 - freqA) * popsize);
popnow <- c(rep("A", initA), rep("B", initB));
alleleFreq <- numeric(length=Ngens);
alleleFreq[1] <- freqA;
simDrift <- function( Ngens = 1000, freqA = 0.5, popsize = popNew[j] ) {
initA <- floor(freqA * popsize);
initB <- ceiling( (1 - freqA) * popsize);
popnow <- c(rep("A", initA), rep("B", initB));
alleleFreq <- numeric(length=Ngens);
alleleFreq[1] <- freqA;
for (i in 2:(Ngens)) {
popnow <- sample(popnow, replace = T);  #
alleleFreq[i] <- sum(popnow == "A")/popsize;
}
return(alleleFreq);
}
x <- c(simDrift());
driftMat[,i] <- x;
}
VariedPops[[j]]<-driftMat;
}
VariedPops;
par(mfrow = c(1,1))
fit <- abline(lm(BigIdea$Po_NPPp ~ BigIdea$CIA, data = BigIdea),  lwd=10, col = "blue")
plot(fauxdat~fauxCIA, type = "l", col = "blue", lwd = 20, cex = 3, xlim = c(65, 79), ylim = c (0.1, 0.8))
fauxdat <- c(0, 0.2, 0.4, 0.6 )
fauxCIA <- c(65, 70, 75, 80)
box(lwd = 4)
help("min")
mtext(2,text = "Po(gPm-2yr-1)/", line = 4.5, cex = 2, family = "Times",font = 2)
mtext(2,text = "NPPp(gPm-2yr-1)", line = 3, cex = 2, family = "Times", font = 2)
mtext(1,text = "Tau Pi", line = 3.5, cex = 2, family = "Times", font = 2)
BigIdea <- read.csv("SUMMARY_BIGIDEA.csv", header = T)
BigIdea
par(mfrow = c(1,1))
fit <- abline(lm(BigIdea$Po_NPPp ~ BigIdea$CIA, data = BigIdea),  lwd=10, col = "blue")
plot(fauxdat~fauxCIA, type = "l", col = "blue", lwd = 20, cex = 3, xlim = c(65, 79), ylim = c (0.1, 0.8))
BigIdea <- read.csv("SUMMARY_BIGIDEA.csv", header = T)
BigIdea
par(mfrow = c(1,1))
fit <- abline(lm(BigIdea$Po_NPPp ~ BigIdea$CIA, data = BigIdea),  lwd=10, col = "blue")
plot(fauxdat~fauxCIA, type = "l", col = "blue", lwd = 20, cex = 3, xlim = c(65, 79), ylim = c (0.1, 0.8))
fauxdat <- c(0, 0.2, 0.4, 0.6 )
fauxCIA <- c(65, 70, 75, 80)
box(lwd = 4)
help("min")
mtext(2,text = "Po(gPm-2yr-1)/", line = 4.5, cex = 2, family = "Times",font = 2)
mtext(2,text = "NPPp(gPm-2yr-1)", line = 3, cex = 2, family = "Times", font = 2)
mtext(1,text = "Tau Pi", line = 3.5, cex = 2, family = "Times", font = 2)
legend("bottomleft", legend = unique(BigIdea$Site),bty="n", col=unique(siteColor), pch=unique(sitePoints), cex=1)
fit <- abline(lm(BigIdea$Po_NPPp ~ BigIdea$CIA, data = BigIdea),  lwd=10, col = "blue")
plot(fauxdat~fauxCIA, type = "l", col = "blue", lwd = 20, cex = 3, xlim = c(65, 79), ylim = c (0, 0.8))
fauxdat <- c(0, 0.2, 0.4, 0.6 )
fauxCIA <- c(65, 70, 75, 80)
par(mfrow = c(1,1))
fit <- abline(lm(BigIdea$Po_NPPp ~ BigIdea$CIA, data = BigIdea),  lwd=10, col = "blue")
plot(fauxdat~fauxCIA, type = "l", col = "blue", lwd = 20, cex = 3, xlim = c(64, 79), ylim = c (-0.1, 0.8))
fauxdat <- c(0, 0.2, 0.4, 0.6 )
fauxCIA <- c(65, 70, 75, 80)
box(lwd = 4)
help("min")
par(mfrow = c(1,1))
fit <- abline(lm(BigIdea$Po_NPPp ~ BigIdea$CIA, data = BigIdea),  lwd=10, col = "blue")
plot(fauxdat~fauxCIA, type = "l", col = "blue", lwd = 20, cex = 3, xlim = c(64, 85), ylim = c (-0.1, 0.8))
fauxdat <- c(0, 0.2, 0.4, 0.6 )
fauxCIA <- c(65, 70, 75, 80)
box(lwd = 4)
par(mfrow = c(1,1))
fit <- abline(lm(BigIdea$Po_NPPp ~ BigIdea$CIA, data = BigIdea),  lwd=10, col = "blue")
plot(fauxdat~fauxCIA, type = "l", col = "blue", lwd = 20, cex = 3, xlim = c(64, 83), ylim = c (-0.1, 0.8))
fauxdat <- c(0, 0.2, 0.4, 0.6 )
fauxCIA <- c(65, 70, 75, 80)
par(mfrow = c(1,1))
fit <- abline(lm(BigIdea$Po_NPPp ~ BigIdea$CIA, data = BigIdea),  lwd=10, col = "blue")
plot(fauxdat~fauxCIA, type = "l", col = "blue", lwd = 20, cex = 3, xlim = c(64, 81), ylim = c (-0.1, 0.8))
fauxdat <- c(0, 0.2, 0.4, 0.6 )
fauxCIA <- c(65, 70, 75, 80)
box(lwd = 4)
SitesC <- read.csv("CData.csv", header = T);
exudates <- subset(SitesC, forest == "R4" | forest == "R1" | forest == "R7", drop = F )
Hardwood <- exudates[exudates$landuse == "Hardwood", ];
HardwoodMeans <- tapply(Hardwood$AP.EOC.C, Hardwood$mean_depth, mean);
depths <- c(45, 125, 175, 275, 450)
plot(depths ~ HardwoodMeans,
col= "blue",
pch = 16,
ylim = c(475,0),
xlim = c(0,.0006),
type = "l",
xlab = "",
xaxt = "n",
ylab = "",
lwd = 7,
cex.axis = 3)
axis(3, cex.axis = 3);
box(lwd = 5)
legend("bottomright",
legend = c("CCZO Hardwood Forest Mean"),
bty = "n",
fill = c("blue", "red"),
cex = .5)
box(lwd = 5)
help("readRDS")
setwd("~/Google Drive/KU Info/Spring 2018/DataCapentry_EnvironmentalInformatics/Assignment_2_Hauser_modularity")
dir()
readRDS("USAAnnualPcpn1950_2008.rds")
dir()
precip <- readRDS("USAAnnualPcpn1950_2008.rds")
temp <- readRDS("USAAnnualTemp1950_2008.rds")
precip <- readRDS("USAAnnualPcpn1950_2008.rds")
temp <- readRDS("USAAnnualTemp1950_2008.rds")
temp
str(precip)
head(precip)
tail(precip)
head(temp)
tail(precip)
tail(temp)
str(temp)
str(precip)
plot(temp~year)
plot(data~year, data = precip)
table(precip)
names(precip$state)
precip$state
temp$state
help(apply)
plot(data~year, data = precip[precip$state == "AK",])
plot(data~year, data = precip[precip$state == "AK"])
plot(data~year, data = precip[precip$state == "AK",])
precip[precip$state == "AK",]
precip[precip$state == "AL",]
precip[precip$state == "AK",]
precip[precip$state == "AZ",]
precip[precip$state == "OH",]
plot(data~year, data = temp[temp$state == "AK",])
str(temp)
tapply(temp$state, temp$year, mean)
tapply(temp$year, temp$state, mean)
AK <- temp[temp$state == "AK",]
tapply(AK$year, AK$data, mean)
AKdat <- tapply(AK$year, AK$data, mean)
str(AKdat)
plot(AKdat)
plot(AKdat$temp)
AKdat <- tapply(AK$data, AK$year, mean)
AKdat
AK <- temp[temp$state == "AK",]
AK
na.rm(AK)
help("na.omit.data.frame")
AK <- na.omit(temp[temp$state == "AK",])
AK
AKdat <- tapply(AK$data, AK$year, mean)
AKdat
plot(AKdat)
tapply(temp$data, temp$year, mean)
na.omit(tapply(temp$data, temp$year, mean))
temps <- na.omit(temp)
tapply(temps$data, temps$year, mean)
wholeTdat <- tapply(temps$data, temps$year, mean)
plot(wholeTdat)
split(temp, temp$state)
help(slope)
help(corr)
help(cor)
locTdat <- tapply (locTemps$data, locTemps$year, cor)
locTemps <- split(temp, temp$state)
locTdat <- tapply (locTemps$data, locTemps$year, cor)
locTemps[1]
locTemps[30]
